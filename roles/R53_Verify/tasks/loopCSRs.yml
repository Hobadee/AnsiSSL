#
# We run this once for every CSR we have
#
# loop_var:  "CSR"
# index_var: "CSR_idx"
#

# Each Certificate Signing Requests (CSR) may have multiple challenges.  Loop through them.
# - name: Loop through CSR Challenges
#   include_tasks: loopChallenges.yml
#   loop: "{{ CSR['challenge_data'] | dict2items }}"
#   loop_control:
#     loop_var: "challenge"
#     index_var: "challenge_idx"



- name: Fullfill ACME challenge in R53
  community.aws.route53:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    hosted_zone_id: "{{ challenge.value['dns-01']['R53zoneID'] }}"
    record: "{{ challenge.value['dns-01']['record'] }}"
    type: TXT
    ttl: 60
    state: present
    # We could significantly speed things up by not waiting for DNS to propagate, but
    # we run the risk of not having the challenge ready in time for LE to verify it.
    wait: yes
    value: "\"{{ challenge.value['dns-01']['resource_value'] }}\""
  loop: "{{ CSR['challenge_data'] | dict2items }}"
  loop_control:
    loop_var: "challenge"
    index_var: "challenge_idx"
  # While async would significantly speed things up, this module appears to break
  # async: 300
  # poll: 5


# Alternatively, we can probably run this right here.  I stole this snippet which does the loop locally instead.
# - community.aws.route53:
#     zone: sample.com
#     record: "{{ item.key }}"
#     type: TXT
#     ttl: 60
#     state: present
#     wait: yes
#     # Note: item.value is a list of TXT entries, and route53
#     # requires every entry to be enclosed in quotes
#     value: "{{ item.value | map('regex_replace', '^(.*)$', '\"\\1\"' ) | list }}"
#   loop: "{{ sample_com_challenge.challenge_data_dns | dict2items }}"
#   when: sample_com_challenge is changed
