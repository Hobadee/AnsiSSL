---
# tasks file for ACME_Verify


- name: Let the challenge be validated and retrieve the cert and intermediate certificate
  become: true
  community.crypto.acme_certificate:
    modify_account: no
    account_key_src: "{{ [ acme_dir_base, acme_dir_account, acme_directory_url, acme_key_account ] | path_join }}"
    csr: "{{ [ acme_dir_base, acme_dir_certs, item.item.item.commonName, acme_dir_certs_csrs, timestamp ] | path_join }}{{ ext_csr }}"
    dest: "{{ [ acme_dir_base, acme_dir_certs, item.item.item.commonName, acme_dir_certs_archive, (timestamp +'.'+ acme_key_cert) ] | path_join }}"
    chain_dest: "{{ [ acme_dir_base, acme_dir_certs, item.item.item.commonName, acme_dir_certs_archive, (timestamp +'.'+ acme_key_chain) ] | path_join }}"
    fullchain_dest: "{{ [ acme_dir_base, acme_dir_certs, item.item.item.commonName, acme_dir_certs_archive, (timestamp +'.'+ acme_key_full) ] | path_join }}"
    challenge: "{{ acme_challenge_type }}"
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    remaining_days: "{{ acme_remaining_days }}"
    data: "{{ item }}"
  when: ACME_challenge is changed
  loop: "{{ ACME_challenge.results }}"
  register: ACME_result


- name: Finish setup of certificates; Symlink and cleanup
  include_tasks: cert_setup.yml
  tags: symlink
  loop: "{{ ACME_result.results }}"
  loop_control:
    loop_var: "cert"

